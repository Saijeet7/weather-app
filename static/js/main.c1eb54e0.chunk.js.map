{"version":3,"sources":["components/weather/weathercard.js","components/weather/temp.js","App.js","reportWebVitals.js","index.js"],"names":["Weathercard","_ref","tempInfo","weatherState","setWeatherState","React","useState","temp","humidity","pressure","weathermood","name","speed","country","sunset","useEffect","date","Date","timeStr","concat","getHours","getMinutes","_jsx","_Fragment","children","_jsxs","className","toLocaleString","Temp","searchValue","setSearchValue","setTemInfo","getWeatherInfo","async","url","res","fetch","data","json","main","weather","wind","sys","error","console","log","type","placeholder","autoFocus","id","value","onChange","e","target","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c1eb54e0.chunk.js","sourcesContent":["import React, {useEffect} from 'react'\n\nconst Weathercard = ({tempInfo}) => {\n\n    const [weatherState, setWeatherState] = React.useState(\"\");\n    const  {\n        temp,\n        humidity,\n        pressure,\n        weathermood,\n        name,\n        speed,\n        country,\n        sunset\n    }=tempInfo;\n\n    useEffect(()=>{\n        if(weathermood){\n            switch (weathermood) {\n                case \"Clouds\":\n                    setWeatherState(\"wi-day-cloudy\");\n                    break;\n                case \"Haze\":\n                    setWeatherState(\"wi-fog\");\n                    break;\n                case \"Clear\":\n                    setWeatherState(\"wi-day-sunny\");\n                    break;\n                case \"Mist\":\n                    setWeatherState(\"wi-dust\");\n                    break;\n                        \n                default:\n                    setWeatherState(\"wi-day-sunny\");\n                    break;\n            }\n        }\n    },[weathermood]);\n\n    //converting the seconds into time\n    let sec = sunset;\n    let date = new Date(sec*1000);\n    let timeStr = `${date.getHours()}:${date.getMinutes()}`;\n    return (\n        <>\n            <article className=\"widget\">\n                <div className=\"weatherIcon\">\n                    <i className={`wi ${weatherState}`}></i>\n                </div>\n\n                <div className=\"weatherInfo\">\n                    <div className=\"temperature\">\n                        <span>{temp}&deg;</span>\n                    </div>\n                    <div className=\"description\">\n                        <div className=\"weatherCondition\">{weathermood}</div>\n                        <div className=\"place\"> {name}, {country}</div>\n                    </div>\n                </div>\n                <div className=\"date\"> {new Date().toLocaleString()} </div>\n                {/* our 4 Column section */}\n                <div className=\"extra-temp\">\n                    <div className=\"temp-info-minmax\">\n                        <div className=\"two-sided-section\">\n                            <p>\n                                <i className={\"wi wi-sunset\"}></i>\n                            </p>\n                            <p className=\"extra-info-leftside\">\n                                {timeStr}<br/>\n                                Sunset\n                            </p>\n                        </div>\n                        <div className=\"two-sided-section\">\n                            <p>\n                                <i className={\"wi wi-humidity\"}></i>\n                            </p>\n                            <p className=\"extra-info-leftside\">\n                                {humidity} <br/>\n                                Humidity\n                            </p>\n                        </div>\n\n                    </div>\n                    <div className=\"weather-extra-info\">\n                    <div className=\"two-sided-section\">\n                            <p>\n                                <i className={\"wi wi-rain\"}></i>\n                            </p>\n                            <p className=\"extra-info-leftside\">\n                                {pressure} <br/>\n                                Pressure\n                            </p>\n                        </div>\n                        <div className=\"two-sided-section\">\n                            <p>\n                                <i className={\"wi wi-strong-wind\"}></i>\n                            </p>\n                            <p className=\"extra-info-leftside\">\n                                {speed} <br/>\n                                Speed\n                            </p>\n                        </div>                        \n                    </div>\n                </div>\n            </article>            \n        </>\n    )\n}\n\nexport default Weathercard\n\n","import React, {useState, useEffect} from 'react';\nimport Weathercard from './weathercard';\nimport \"./style.css\";\n\n\nconst Temp = () => {\n\n    const [searchValue, setSearchValue] = useState(\"kathmandu\");\n    const [tempInfo, setTemInfo] = useState({});\n\n    const getWeatherInfo = async() => {\n        try{\n            let url=`https://api.openweathermap.org/data/2.5/weather?q=${searchValue}&units=metric&appid=ece0b97615837f65de88726c8590b805`;\n            let res= await fetch(url);\n            let data = await res.json();\n\n            const {temp, humidity, pressure} = data.main;\n            const {main: weathermood} = data.weather[0];\n            const {name}=data;\n            const {speed} = data.wind;\n            const {country, sunset} = data.sys;\n            \n            const myNewWeatherInfo = {\n                temp,\n                humidity,\n                pressure,\n                weathermood,\n                name,\n                speed,\n                country,\n                sunset\n            };\n\n         setTemInfo(myNewWeatherInfo);\n        } catch (error){\n            console.log(error);\n        }\n    };\n\n    useEffect(() =>{\n        getWeatherInfo();\n    },[]);\n    return(\n        <>\n            <div className=\"wrap\">\n                <div className=\"search\">\n                    <input type =\"search\"\n                        placeholder=\"search...\"\n                        autoFocus\n                        id=\"search\"\n                        className=\"searchTerm\"\n                        value={searchValue}\n                        onChange={(e) => setSearchValue(e.target.value)}\n                    />\n                    <button\n                    className=\"searchButton\"\n                    type=\"button\"\n                    onClick={getWeatherInfo}>\n                        Search\n                    </button>\n                </div>\n            </div>\n\n            {/*our temp card*/}\n            <Weathercard tempInfo={tempInfo}/>\n        </>\n    );\n}\n\nexport default Temp\n","import React from 'react';\nimport Temp from './components/weather/temp';\n\nfunction App() {\n  return (\n    <>\n      <Temp/>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}